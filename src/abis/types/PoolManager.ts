/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type PoolKeyStruct = {
  currency0: string;
  currency1: string;
  fee: BigNumberish;
  tickSpacing: BigNumberish;
  hooks: string;
};

export type PoolKeyStructOutput = [string, string, number, number, string] & {
  currency0: string;
  currency1: string;
  fee: number;
  tickSpacing: number;
  hooks: string;
};

export declare namespace Position {
  export type InfoStruct = {
    liquidity: BigNumberish;
    feeGrowthInside0LastX128: BigNumberish;
    feeGrowthInside1LastX128: BigNumberish;
  };

  export type InfoStructOutput = [BigNumber, BigNumber, BigNumber] & {
    liquidity: BigNumber;
    feeGrowthInside0LastX128: BigNumber;
    feeGrowthInside1LastX128: BigNumber;
  };
}

export declare namespace IPoolManager {
  export type ModifyPositionParamsStruct = {
    tickLower: BigNumberish;
    tickUpper: BigNumberish;
    liquidityDelta: BigNumberish;
  };

  export type ModifyPositionParamsStructOutput = [number, number, BigNumber] & {
    tickLower: number;
    tickUpper: number;
    liquidityDelta: BigNumber;
  };

  export type SwapParamsStruct = {
    zeroForOne: boolean;
    amountSpecified: BigNumberish;
    sqrtPriceLimitX96: BigNumberish;
  };

  export type SwapParamsStructOutput = [boolean, BigNumber, BigNumber] & {
    zeroForOne: boolean;
    amountSpecified: BigNumber;
    sqrtPriceLimitX96: BigNumber;
  };
}

export declare namespace Pool {
  export type Slot0Struct = {
    sqrtPriceX96: BigNumberish;
    tick: BigNumberish;
    protocolFees: BigNumberish;
    hookFees: BigNumberish;
  };

  export type Slot0StructOutput = [BigNumber, number, number, number] & {
    sqrtPriceX96: BigNumber;
    tick: number;
    protocolFees: number;
    hookFees: number;
  };
}

export interface PoolManagerInterface extends utils.Interface {
  functions: {
    "MAX_TICK_SPACING()": FunctionFragment;
    "MIN_PROTOCOL_FEE_DENOMINATOR()": FunctionFragment;
    "MIN_TICK_SPACING()": FunctionFragment;
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "collectHookFees(address,address,uint256)": FunctionFragment;
    "collectProtocolFees(address,address,uint256)": FunctionFragment;
    "currencyDelta(address,address)": FunctionFragment;
    "donate((address,address,uint24,int24,address),uint256,uint256,bytes)": FunctionFragment;
    "extsload(bytes32)": FunctionFragment;
    "extsload(bytes32,uint256)": FunctionFragment;
    "getLiquidity(bytes32,address,int24,int24)": FunctionFragment;
    "getLiquidity(bytes32)": FunctionFragment;
    "getLock(uint256)": FunctionFragment;
    "getLockSentinel()": FunctionFragment;
    "getPosition(bytes32,address,int24,int24)": FunctionFragment;
    "getSlot0(bytes32)": FunctionFragment;
    "hookFeesAccrued(address,address)": FunctionFragment;
    "initialize((address,address,uint24,int24,address),uint160,bytes)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "lock(bytes)": FunctionFragment;
    "mint(address,address,uint256)": FunctionFragment;
    "modifyPosition((address,address,uint24,int24,address),(int24,int24,int256),bytes)": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "pools(bytes32)": FunctionFragment;
    "protocolFeeController()": FunctionFragment;
    "protocolFeesAccrued(address)": FunctionFragment;
    "reservesOf(address)": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setHookFees((address,address,uint24,int24,address))": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "setProtocolFeeController(address)": FunctionFragment;
    "setProtocolFees((address,address,uint24,int24,address))": FunctionFragment;
    "settle(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "swap((address,address,uint24,int24,address),(bool,int256,uint160),bytes)": FunctionFragment;
    "take(address,address,uint256)": FunctionFragment;
    "uri(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_TICK_SPACING"
      | "MIN_PROTOCOL_FEE_DENOMINATOR"
      | "MIN_TICK_SPACING"
      | "balanceOf"
      | "balanceOfBatch"
      | "collectHookFees"
      | "collectProtocolFees"
      | "currencyDelta"
      | "donate"
      | "extsload(bytes32)"
      | "extsload(bytes32,uint256)"
      | "getLiquidity(bytes32,address,int24,int24)"
      | "getLiquidity(bytes32)"
      | "getLock"
      | "getLockSentinel"
      | "getPosition"
      | "getSlot0"
      | "hookFeesAccrued"
      | "initialize"
      | "isApprovedForAll"
      | "lock"
      | "mint"
      | "modifyPosition"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "owner"
      | "pools"
      | "protocolFeeController"
      | "protocolFeesAccrued"
      | "reservesOf"
      | "safeBatchTransferFrom"
      | "safeTransferFrom"
      | "setApprovalForAll"
      | "setHookFees"
      | "setOwner"
      | "setProtocolFeeController"
      | "setProtocolFees"
      | "settle"
      | "supportsInterface"
      | "swap"
      | "take"
      | "uri"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_TICK_SPACING",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_PROTOCOL_FEE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_TICK_SPACING",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "collectHookFees",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectProtocolFees",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currencyDelta",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "donate",
    values: [PoolKeyStruct, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "extsload(bytes32)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "extsload(bytes32,uint256)",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidity(bytes32,address,int24,int24)",
    values: [BytesLike, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidity(bytes32)",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLockSentinel",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [BytesLike, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getSlot0", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "hookFeesAccrued",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PoolKeyStruct, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "lock", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyPosition",
    values: [PoolKeyStruct, IPoolManager.ModifyPositionParamsStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pools", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "protocolFeeController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeesAccrued",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "reservesOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setHookFees",
    values: [PoolKeyStruct]
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setProtocolFeeController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFees",
    values: [PoolKeyStruct]
  ): string;
  encodeFunctionData(functionFragment: "settle", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [PoolKeyStruct, IPoolManager.SwapParamsStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "take",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;

  decodeFunctionResult(
    functionFragment: "MAX_TICK_SPACING",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_PROTOCOL_FEE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_TICK_SPACING",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectHookFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectProtocolFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currencyDelta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "extsload(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extsload(bytes32,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidity(bytes32,address,int24,int24)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidity(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLockSentinel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSlot0", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hookFeesAccrued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "modifyPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeesAccrued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reservesOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHookFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFeeController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "take", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;

  events: {
    "ApprovalForAll(address,address,bool)": EventFragment;
    "HookFeeUpdated(bytes32,uint24)": EventFragment;
    "Initialize(bytes32,address,address,uint24,int24,address)": EventFragment;
    "ModifyPosition(bytes32,address,int24,int24,int256)": EventFragment;
    "OwnerChanged(address,address)": EventFragment;
    "ProtocolFeeControllerUpdated(address)": EventFragment;
    "ProtocolFeeUpdated(bytes32,uint24)": EventFragment;
    "Swap(bytes32,address,int128,int128,uint160,uint128,int24,uint24)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "URI(string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HookFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialize"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModifyPosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ProtocolFeeControllerUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtocolFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
}

export interface ApprovalForAllEventObject {
  account: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface HookFeeUpdatedEventObject {
  id: string;
  hookFees: number;
}
export type HookFeeUpdatedEvent = TypedEvent<
  [string, number],
  HookFeeUpdatedEventObject
>;

export type HookFeeUpdatedEventFilter = TypedEventFilter<HookFeeUpdatedEvent>;

export interface InitializeEventObject {
  id: string;
  currency0: string;
  currency1: string;
  fee: number;
  tickSpacing: number;
  hooks: string;
}
export type InitializeEvent = TypedEvent<
  [string, string, string, number, number, string],
  InitializeEventObject
>;

export type InitializeEventFilter = TypedEventFilter<InitializeEvent>;

export interface ModifyPositionEventObject {
  id: string;
  sender: string;
  tickLower: number;
  tickUpper: number;
  liquidityDelta: BigNumber;
}
export type ModifyPositionEvent = TypedEvent<
  [string, string, number, number, BigNumber],
  ModifyPositionEventObject
>;

export type ModifyPositionEventFilter = TypedEventFilter<ModifyPositionEvent>;

export interface OwnerChangedEventObject {
  oldOwner: string;
  newOwner: string;
}
export type OwnerChangedEvent = TypedEvent<
  [string, string],
  OwnerChangedEventObject
>;

export type OwnerChangedEventFilter = TypedEventFilter<OwnerChangedEvent>;

export interface ProtocolFeeControllerUpdatedEventObject {
  protocolFeeController: string;
}
export type ProtocolFeeControllerUpdatedEvent = TypedEvent<
  [string],
  ProtocolFeeControllerUpdatedEventObject
>;

export type ProtocolFeeControllerUpdatedEventFilter =
  TypedEventFilter<ProtocolFeeControllerUpdatedEvent>;

export interface ProtocolFeeUpdatedEventObject {
  id: string;
  protocolFees: number;
}
export type ProtocolFeeUpdatedEvent = TypedEvent<
  [string, number],
  ProtocolFeeUpdatedEventObject
>;

export type ProtocolFeeUpdatedEventFilter =
  TypedEventFilter<ProtocolFeeUpdatedEvent>;

export interface SwapEventObject {
  id: string;
  sender: string;
  amount0: BigNumber;
  amount1: BigNumber;
  sqrtPriceX96: BigNumber;
  liquidity: BigNumber;
  tick: number;
  fee: number;
}
export type SwapEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber, number, number],
  SwapEventObject
>;

export type SwapEventFilter = TypedEventFilter<SwapEvent>;

export interface TransferBatchEventObject {
  operator: string;
  from: string;
  to: string;
  ids: BigNumber[];
  values: BigNumber[];
}
export type TransferBatchEvent = TypedEvent<
  [string, string, string, BigNumber[], BigNumber[]],
  TransferBatchEventObject
>;

export type TransferBatchEventFilter = TypedEventFilter<TransferBatchEvent>;

export interface TransferSingleEventObject {
  operator: string;
  from: string;
  to: string;
  id: BigNumber;
  value: BigNumber;
}
export type TransferSingleEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  TransferSingleEventObject
>;

export type TransferSingleEventFilter = TypedEventFilter<TransferSingleEvent>;

export interface URIEventObject {
  value: string;
  id: BigNumber;
}
export type URIEvent = TypedEvent<[string, BigNumber], URIEventObject>;

export type URIEventFilter = TypedEventFilter<URIEvent>;

export interface PoolManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoolManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_TICK_SPACING(overrides?: CallOverrides): Promise<[number]>;

    MIN_PROTOCOL_FEE_DENOMINATOR(overrides?: CallOverrides): Promise<[number]>;

    MIN_TICK_SPACING(overrides?: CallOverrides): Promise<[number]>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    collectHookFees(
      recipient: string,
      currency: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    collectProtocolFees(
      recipient: string,
      currency: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    currencyDelta(
      locker: string,
      currency: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { currencyDelta: BigNumber }>;

    donate(
      key: PoolKeyStruct,
      amount0: BigNumberish,
      amount1: BigNumberish,
      hookData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "extsload(bytes32)"(
      slot: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { value: string }>;

    "extsload(bytes32,uint256)"(
      startSlot: BytesLike,
      nSlots: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getLiquidity(bytes32,address,int24,int24)"(
      id: BytesLike,
      _owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { liquidity: BigNumber }>;

    "getLiquidity(bytes32)"(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { liquidity: BigNumber }>;

    getLock(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { locker: string }>;

    getLockSentinel(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { sentinel: BigNumber }>;

    getPosition(
      id: BytesLike,
      owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [Position.InfoStructOutput] & { position: Position.InfoStructOutput }
    >;

    getSlot0(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number] & {
        sqrtPriceX96: BigNumber;
        tick: number;
        protocolFees: number;
        hookFees: number;
      }
    >;

    hookFeesAccrued(
      hookAddress: string,
      currency: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      key: PoolKeyStruct,
      sqrtPriceX96: BigNumberish,
      hookData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lock(
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    mint(
      currency: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    modifyPosition(
      key: PoolKeyStruct,
      params: IPoolManager.ModifyPositionParamsStruct,
      hookData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      id: BigNumberish,
      value: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pools(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [Pool.Slot0StructOutput, BigNumber, BigNumber, BigNumber] & {
        slot0: Pool.Slot0StructOutput;
        feeGrowthGlobal0X128: BigNumber;
        feeGrowthGlobal1X128: BigNumber;
        liquidity: BigNumber;
      }
    >;

    protocolFeeController(overrides?: CallOverrides): Promise<[string]>;

    protocolFeesAccrued(
      currency: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    reservesOf(
      currency: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setHookFees(
      key: PoolKeyStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setOwner(
      _owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setProtocolFeeController(
      controller: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setProtocolFees(
      key: PoolKeyStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    settle(
      currency: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    swap(
      key: PoolKeyStruct,
      params: IPoolManager.SwapParamsStruct,
      hookData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    take(
      currency: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
  };

  MAX_TICK_SPACING(overrides?: CallOverrides): Promise<number>;

  MIN_PROTOCOL_FEE_DENOMINATOR(overrides?: CallOverrides): Promise<number>;

  MIN_TICK_SPACING(overrides?: CallOverrides): Promise<number>;

  balanceOf(
    account: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    accounts: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  collectHookFees(
    recipient: string,
    currency: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  collectProtocolFees(
    recipient: string,
    currency: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  currencyDelta(
    locker: string,
    currency: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  donate(
    key: PoolKeyStruct,
    amount0: BigNumberish,
    amount1: BigNumberish,
    hookData: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "extsload(bytes32)"(
    slot: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "extsload(bytes32,uint256)"(
    startSlot: BytesLike,
    nSlots: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getLiquidity(bytes32,address,int24,int24)"(
    id: BytesLike,
    _owner: string,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getLiquidity(bytes32)"(
    id: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLock(i: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getLockSentinel(overrides?: CallOverrides): Promise<BigNumber>;

  getPosition(
    id: BytesLike,
    owner: string,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    overrides?: CallOverrides
  ): Promise<Position.InfoStructOutput>;

  getSlot0(
    id: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, number, number] & {
      sqrtPriceX96: BigNumber;
      tick: number;
      protocolFees: number;
      hookFees: number;
    }
  >;

  hookFeesAccrued(
    hookAddress: string,
    currency: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    key: PoolKeyStruct,
    sqrtPriceX96: BigNumberish,
    hookData: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lock(
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  mint(
    currency: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  modifyPosition(
    key: PoolKeyStruct,
    params: IPoolManager.ModifyPositionParamsStruct,
    hookData: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  onERC1155BatchReceived(
    arg0: string,
    arg1: string,
    ids: BigNumberish[],
    values: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: string,
    arg1: string,
    id: BigNumberish,
    value: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pools(
    id: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [Pool.Slot0StructOutput, BigNumber, BigNumber, BigNumber] & {
      slot0: Pool.Slot0StructOutput;
      feeGrowthGlobal0X128: BigNumber;
      feeGrowthGlobal1X128: BigNumber;
      liquidity: BigNumber;
    }
  >;

  protocolFeeController(overrides?: CallOverrides): Promise<string>;

  protocolFeesAccrued(
    currency: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  reservesOf(currency: string, overrides?: CallOverrides): Promise<BigNumber>;

  safeBatchTransferFrom(
    from: string,
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: string,
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setHookFees(
    key: PoolKeyStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setOwner(
    _owner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setProtocolFeeController(
    controller: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setProtocolFees(
    key: PoolKeyStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  settle(
    currency: string,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  swap(
    key: PoolKeyStruct,
    params: IPoolManager.SwapParamsStruct,
    hookData: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  take(
    currency: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    MAX_TICK_SPACING(overrides?: CallOverrides): Promise<number>;

    MIN_PROTOCOL_FEE_DENOMINATOR(overrides?: CallOverrides): Promise<number>;

    MIN_TICK_SPACING(overrides?: CallOverrides): Promise<number>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    collectHookFees(
      recipient: string,
      currency: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectProtocolFees(
      recipient: string,
      currency: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currencyDelta(
      locker: string,
      currency: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    donate(
      key: PoolKeyStruct,
      amount0: BigNumberish,
      amount1: BigNumberish,
      hookData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "extsload(bytes32)"(
      slot: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "extsload(bytes32,uint256)"(
      startSlot: BytesLike,
      nSlots: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getLiquidity(bytes32,address,int24,int24)"(
      id: BytesLike,
      _owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLiquidity(bytes32)"(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLock(i: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getLockSentinel(overrides?: CallOverrides): Promise<BigNumber>;

    getPosition(
      id: BytesLike,
      owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<Position.InfoStructOutput>;

    getSlot0(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number] & {
        sqrtPriceX96: BigNumber;
        tick: number;
        protocolFees: number;
        hookFees: number;
      }
    >;

    hookFeesAccrued(
      hookAddress: string,
      currency: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      key: PoolKeyStruct,
      sqrtPriceX96: BigNumberish,
      hookData: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lock(data: BytesLike, overrides?: CallOverrides): Promise<string>;

    mint(
      currency: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    modifyPosition(
      key: PoolKeyStruct,
      params: IPoolManager.ModifyPositionParamsStruct,
      hookData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      id: BigNumberish,
      value: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pools(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [Pool.Slot0StructOutput, BigNumber, BigNumber, BigNumber] & {
        slot0: Pool.Slot0StructOutput;
        feeGrowthGlobal0X128: BigNumber;
        feeGrowthGlobal1X128: BigNumber;
        liquidity: BigNumber;
      }
    >;

    protocolFeeController(overrides?: CallOverrides): Promise<string>;

    protocolFeesAccrued(
      currency: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reservesOf(currency: string, overrides?: CallOverrides): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setHookFees(key: PoolKeyStruct, overrides?: CallOverrides): Promise<void>;

    setOwner(_owner: string, overrides?: CallOverrides): Promise<void>;

    setProtocolFeeController(
      controller: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolFees(
      key: PoolKeyStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    settle(currency: string, overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    swap(
      key: PoolKeyStruct,
      params: IPoolManager.SwapParamsStruct,
      hookData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    take(
      currency: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ApprovalForAll(address,address,bool)"(
      account?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      account?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "HookFeeUpdated(bytes32,uint24)"(
      id?: BytesLike | null,
      hookFees?: null
    ): HookFeeUpdatedEventFilter;
    HookFeeUpdated(
      id?: BytesLike | null,
      hookFees?: null
    ): HookFeeUpdatedEventFilter;

    "Initialize(bytes32,address,address,uint24,int24,address)"(
      id?: BytesLike | null,
      currency0?: string | null,
      currency1?: string | null,
      fee?: null,
      tickSpacing?: null,
      hooks?: null
    ): InitializeEventFilter;
    Initialize(
      id?: BytesLike | null,
      currency0?: string | null,
      currency1?: string | null,
      fee?: null,
      tickSpacing?: null,
      hooks?: null
    ): InitializeEventFilter;

    "ModifyPosition(bytes32,address,int24,int24,int256)"(
      id?: BytesLike | null,
      sender?: string | null,
      tickLower?: null,
      tickUpper?: null,
      liquidityDelta?: null
    ): ModifyPositionEventFilter;
    ModifyPosition(
      id?: BytesLike | null,
      sender?: string | null,
      tickLower?: null,
      tickUpper?: null,
      liquidityDelta?: null
    ): ModifyPositionEventFilter;

    "OwnerChanged(address,address)"(
      oldOwner?: string | null,
      newOwner?: string | null
    ): OwnerChangedEventFilter;
    OwnerChanged(
      oldOwner?: string | null,
      newOwner?: string | null
    ): OwnerChangedEventFilter;

    "ProtocolFeeControllerUpdated(address)"(
      protocolFeeController?: null
    ): ProtocolFeeControllerUpdatedEventFilter;
    ProtocolFeeControllerUpdated(
      protocolFeeController?: null
    ): ProtocolFeeControllerUpdatedEventFilter;

    "ProtocolFeeUpdated(bytes32,uint24)"(
      id?: BytesLike | null,
      protocolFees?: null
    ): ProtocolFeeUpdatedEventFilter;
    ProtocolFeeUpdated(
      id?: BytesLike | null,
      protocolFees?: null
    ): ProtocolFeeUpdatedEventFilter;

    "Swap(bytes32,address,int128,int128,uint160,uint128,int24,uint24)"(
      id?: BytesLike | null,
      sender?: string | null,
      amount0?: null,
      amount1?: null,
      sqrtPriceX96?: null,
      liquidity?: null,
      tick?: null,
      fee?: null
    ): SwapEventFilter;
    Swap(
      id?: BytesLike | null,
      sender?: string | null,
      amount0?: null,
      amount1?: null,
      sqrtPriceX96?: null,
      liquidity?: null,
      tick?: null,
      fee?: null
    ): SwapEventFilter;

    "TransferBatch(address,address,address,uint256[],uint256[])"(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;
    TransferBatch(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;

    "TransferSingle(address,address,address,uint256,uint256)"(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;
    TransferSingle(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;

    "URI(string,uint256)"(
      value?: null,
      id?: BigNumberish | null
    ): URIEventFilter;
    URI(value?: null, id?: BigNumberish | null): URIEventFilter;
  };

  estimateGas: {
    MAX_TICK_SPACING(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_PROTOCOL_FEE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_TICK_SPACING(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectHookFees(
      recipient: string,
      currency: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    collectProtocolFees(
      recipient: string,
      currency: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    currencyDelta(
      locker: string,
      currency: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    donate(
      key: PoolKeyStruct,
      amount0: BigNumberish,
      amount1: BigNumberish,
      hookData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "extsload(bytes32)"(
      slot: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "extsload(bytes32,uint256)"(
      startSlot: BytesLike,
      nSlots: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLiquidity(bytes32,address,int24,int24)"(
      id: BytesLike,
      _owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLiquidity(bytes32)"(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLock(i: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getLockSentinel(overrides?: CallOverrides): Promise<BigNumber>;

    getPosition(
      id: BytesLike,
      owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSlot0(id: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    hookFeesAccrued(
      hookAddress: string,
      currency: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      key: PoolKeyStruct,
      sqrtPriceX96: BigNumberish,
      hookData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lock(
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    mint(
      currency: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    modifyPosition(
      key: PoolKeyStruct,
      params: IPoolManager.ModifyPositionParamsStruct,
      hookData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      id: BigNumberish,
      value: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pools(id: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeeController(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeesAccrued(
      currency: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reservesOf(currency: string, overrides?: CallOverrides): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setHookFees(
      key: PoolKeyStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setOwner(
      _owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setProtocolFeeController(
      controller: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setProtocolFees(
      key: PoolKeyStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    settle(
      currency: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swap(
      key: PoolKeyStruct,
      params: IPoolManager.SwapParamsStruct,
      hookData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    take(
      currency: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    uri(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_TICK_SPACING(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_PROTOCOL_FEE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_TICK_SPACING(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectHookFees(
      recipient: string,
      currency: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    collectProtocolFees(
      recipient: string,
      currency: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    currencyDelta(
      locker: string,
      currency: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    donate(
      key: PoolKeyStruct,
      amount0: BigNumberish,
      amount1: BigNumberish,
      hookData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "extsload(bytes32)"(
      slot: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "extsload(bytes32,uint256)"(
      startSlot: BytesLike,
      nSlots: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLiquidity(bytes32,address,int24,int24)"(
      id: BytesLike,
      _owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLiquidity(bytes32)"(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLock(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLockSentinel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPosition(
      id: BytesLike,
      owner: string,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSlot0(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hookFeesAccrued(
      hookAddress: string,
      currency: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      key: PoolKeyStruct,
      sqrtPriceX96: BigNumberish,
      hookData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lock(
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    mint(
      currency: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    modifyPosition(
      key: PoolKeyStruct,
      params: IPoolManager.ModifyPositionParamsStruct,
      hookData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      id: BigNumberish,
      value: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pools(
      id: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolFeeController(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolFeesAccrued(
      currency: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reservesOf(
      currency: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setHookFees(
      key: PoolKeyStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setOwner(
      _owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setProtocolFeeController(
      controller: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setProtocolFees(
      key: PoolKeyStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    settle(
      currency: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swap(
      key: PoolKeyStruct,
      params: IPoolManager.SwapParamsStruct,
      hookData: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    take(
      currency: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    uri(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
